<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- Arguments to be passed in -->
    <arg name="vmtt_tuning" default="false" />



    <!-- <node name="gcs_bridge" pkg="mavros" type="gcs_bridge"> -->
        <!-- You can connect locally using localhost on port 14550 -->
        <!-- <param name="gcs_url" value="udp://@localhost" /> -->
        <!-- <param name="gcs_url" value="udp://@127.0.0.1:14555" /> -->
    <!-- </node> -->



    <!-- Start mavros and connect to the Pixhawk running APM:Copter through MAVProxy layer -->
    <include file="$(find nasa_s2d)/launch/mavros.launch">
        <!-- Connect via a MAVProxy GCS output -->
        <arg name="fcu_url"  value="udp://127.0.0.1:14567@" />
    </include>



    <!-- launch visual_mtt -->
    <include file="$(find visual_mtt)/launch/visual_mtt.launch">
        <arg name="params" value="$(find nasa_s2d)/param/sully.yaml" />
        <arg name="tuning" value="$(arg vmtt_tuning)" />
        <arg name="imgtopic" value="/camera/image_raw" />
    </include>

    <!-- raise the logger level to warnings and above -->
    <node pkg="rosservice" type="rosservice" name="vmtt_log_srv" args="call --wait visual_frontend/set_logger_level ros.visual_mtt warn" />
    <node pkg="rosservice" type="rosservice" name="rransac_log_srv" args="call --wait rransac/set_logger_level ros.visual_mtt warn" />



    <!-- Broadcast coordinate transformations specific to Sully -->
    <!-- Needed for geolocation, useful for RVIZ visualization -->
    <include file="$(find nasa_s2d)/launch/tf_frames.launch" />



    <!-- connect the geolocator to the output of visual_mtt -->
    <remap from="pose"  to="vectornav/Pose" />
    <include file="$(find flat_earth_geolocation)/launch/geolocate.launch">
        <arg name="show3d" value="false" />
        <arg name="camera_name" value="camera" />
        <arg name="tracks_topic" value="tracks" />

        <!-- tf frames -->
        <arg name="result_frame" value="map" />
        <arg name="camera_frame" value="camera" />
    </include>



    <!-- Ditch Site Selection: Pass in the configuration file directory (mavproxy aircraft dir) -->
    <rosparam command="load" file="$(find dss)/examples/config_files/S2D_config.yaml" />
    <rosparam command="load" file="$(find dss)/examples/ditchsite_lists/ditch_sites.yaml"/>
    <node name="dss_node" pkg="dss" type="safe2ditch_dss" output="screen"/>



    <!-- Adaptive Parameter Tuning -->
    <node pkg="nasa_s2d" type="adaptive_params.py" name="adaptive_params">
        <remap from="odom" to="vectornav/Odom" />
    </node>



    <!-- Visual Obstacle Detection -->
    <node name="obstacle_detection" pkg="nasa_s2d" type="obstacle_detection.py" output="screen">
        <remap from="uav_gps_fix" to="vectornav/GPS" />
    </node>



    <!-- DSS Communications -->
    <!-- <node name="dss_comms" pkg="nasa_s2d" type="dss_comms.py" output="screen" /> -->
</launch>
