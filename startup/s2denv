# Properly setup the Safe2Ditch environment.
#
#

# Get path to the directory of this file, no matter where it is sourced from
MYPATH=$(dirname ${BASH_SOURCE[0]})

###############################################################################
#                   Safe2Ditch Environment Variables                          #
###############################################################################

# Tell the environment where the root of the Safe2Ditch code lives
export S2DROOT=$(realpath $MYPATH/..)

# The .env directory is used to store environment-specific configurations
export S2DENV=$(realpath $S2DROOT/.env)

# Make sure the S2DENV directory exists
mkdir -p $S2DENV

# The location of the MAVProxy Safe2Ditch module (Safe2Ditch/DSS repo)
export S2DDSS=$S2DROOT/catkin_ws/src/dss/src

# The name of the aircraft directory (which houses configuration files)
export S2DAIRCRAFT=aircraft

# ROS networking information
if [ -f "$S2DENV/rosmaster" ];
then
	export ROS_MASTER_URI=$(cat $S2DENV/rosmaster)
else
	export ROS_MASTER_URI=http://localhost:11311
fi
if [ -f "$S2DENV/rosip" ];
then
	export ROS_IP=$(cat $S2DENV/rosip)
else
	export ROS_IP=127.0.0.1
fi

# Location of the recorded ROS bags
if [ -f "$S2DENV/bagpath" ];
then
	export S2DBAGS=$(cat $S2DENV/bagpath)
else
	export S2DBAGS=$HOME
fi

# Current flight test name
if [ -f "$S2DENV/testname" ];
then
	export S2DTESTNAME=$(cat $S2DENV/testname)

	# If this test already exists, append a counter
	if [ -f "$S2DBAGS/$S2DTESTNAME.bag" ];
	then
		# Read which test num we are on
		if [ -f "$S2DENV/testnum" ];
		then
			TESTNUM=$(cat $S2DENV/testnum)
		else
			TESTNUM=1
		fi

		export S2DTESTNAME="$S2DTESTNAME-$TESTNUM"
	else
		# reset the TESTNUM file
		echo 1 > "$S2DENV/testnum"
	fi
else
	export S2DTESTNAME="noname"
fi

###############################################################################
#                                  ROS Setup                                  #
###############################################################################

# ROS Kinetic and Safe2Ditch ROS catkin_ws
source /opt/ros/kinetic/setup.bash
source $S2DROOT/catkin_ws/devel/setup.bash

# ROS Tools
alias catkin_make_tx2='catkin_make -DVISUAL_MTT_CUDA=ON -DOpenCV_DIR=/usr/local/share/OpenCV -DCATKIN_BLACKLIST_PACKAGES="nasa_s2d_sim;ardupilot_sim;gzsatellite;moving_targets"'
alias bagrecord='rosbag record -a -x "/camera/(.*)|/tracks_video(.*)" /camera/image_raw/compressed /camera/camera_info /tracks_video/compressed'

###############################################################################
#                           MAVProxy Safe2Ditch Setup                         #
###############################################################################

# Python Path
# export PYTHONPATH="$PYTHONPATH:$S2DDSS/mavproxy/modules"

# Change the default MAVProxy map service
export MAP_SERVICE=MicrosoftSat

###############################################################################
#                         Helper Environment Functions                        #
###############################################################################

# Setup the Safe2Ditch environment
function setup_s2denv {
	AIRCRAFT=$1
	MASTER=$2
	MYIP=$3
	BAGPATH=$4

	echo $AIRCRAFT > "$S2DENV/aircraft"
	echo $MASTER > "$S2DENV/rosmaster"
	echo $MYIP > "$S2DENV/rosip"
	echo $BAGPATH > "$S2DENV/bagpath"

	source $S2DROOT/startup/s2denv
}

# Give a name for the bag/logs of the next flight that
# will be run after the companion computer reboots
function testname {
        NAME=$1
        echo $NAME > "$S2DENV/testname"

	source "$S2DROOT/startup/s2denv"
}

# Show the S2D and ROS environment vars
function s2denv {
	env | grep S2D
	env | grep ROS
}
